<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[SYSU-pineapple's blog]]></title>
  <link href="http://orange8637.github.com/atom.xml" rel="self"/>
  <link href="http://orange8637.github.com/"/>
  <updated>2013-06-22T19:56:20+08:00</updated>
  <id>http://orange8637.github.com/</id>
  <author>
    <name><![CDATA[姜晨]]></name>
    <email><![CDATA[orange8637@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[UC &amp;&amp; QQ 面试回顾]]></title>
    <link href="http://orange8637.github.com/blog/2013/06/22/uc-and-and-qq-mian-shi-hui-gu/"/>
    <updated>2013-06-22T16:49:00+08:00</updated>
    <id>http://orange8637.github.com/blog/2013/06/22/uc-and-and-qq-mian-shi-hui-gu</id>
    <content type="html"><![CDATA[<blockquote><p>居然就到2013年中了，刚过了6.18电商血拼和漫长酷热的夏至，才意思到，我已经很久没写博客了。当时愿意花几个晚上折腾博客的骚年逐渐被工作取代了闲情逸致，这样不好不好。要找回我的课外时间，就从这篇记录面经博客开始吧。</p></blockquote>

<hr />

<blockquote><p>UC，当时参加的是校招，不是实习生招聘，校招笔试到发放offer时间跨度是一个月，基本上笔试->一面->二面->三面，每一步隔一周。每年的10月是IT企业校招高峰期，同一时期，和同学们听了小米，百度，UC三场招聘。其中UC的宣讲会最打动我，他们的大五文化视频有两幕我记忆深刻：1.一群技术男穿着拖鞋，T恤，短裤，一边上厕所一边做着头部运动 2.一个文静的美女因为到饭堂晚了，眼看最后一个鸡腿就要被前面一个男屌丝打走了，男屌望着美女，对打菜师傅说，鸡腿给她吧，后来美女在电视上看到此男屌是公司联合创始人何小鹏。虽然这两幕都很平常，但是却展现了我喜欢的自由，平等氛围，再加上在学校的不如意（挂科，什么比赛也没参加过，白得像张纸的简历，老师学校不重视不关心），当时我就感动得眼泪差点掉下来，对比其他企业，UC招聘宣传片做得真用心。</p></blockquote>

<hr />

<blockquote><p>因为大二的时候也做了UC的笔试，没过。所以这次也是秉着打酱油心态，陪同学感受移动互联网企业来的。UC的笔试内容是根据岗位来分的，我投的是系统工程师职位。一卷是智力题，这个好像所有岗位都一样，智力题个人最不喜欢，有些你没见过的题，真的让人感觉智力捉鸡，看了答案也觉得不爽，因为即使你以后会解这种题，智力也没感觉提高。二卷是专业题，考的比较广泛，大致分为操作系统（进程，内存管理，IO，文件系统），计网（常见协议，端口，路由之类），简单数据结构（二叉树，递归，指针），工业常用技术（热备份，MySQL数据库，负载均衡策略）。当时笔试忘记带笔，只有打草稿的铅笔，字迹写得非常潦草，后来HR也问到为什么用铅笔答卷，我当时瞎说那铅笔从高考就跟着我了，是我的幸运之笔。。。</p></blockquote>

<hr />

<blockquote><p>因为没有比较正式衣服，借了飞仔的黑色马甲穿，一人到了UC广州科韵路总部。一面人比较多，我们都被安排在门口内坐着，每个人贴了张贴纸在手臂上。UC的门禁上方帖着显眼的火灾逃生线路图，等的比较长时间，我对着图纸看了很久。人生第一面，终于被一个穿红色衣服的男人牵着去了上一层楼，因为找不到空的会议室，在楼上又等了30分钟，不过前台很好，给我倒了水，看了会杂志。第一面的考官问了约摸20个小问题，操作系统，计网，数据库，Linux命令，这4类分别5个问题，问的都不太难，感觉策略就是：操作系统往上下文切换，分页分段管理多看；计网一定要知道TCP三次握手，状态迁移；数据库除了常用SQL语句，往底层MyISAM, InnoDB引擎了解下；Linux多玩下桌面ubuntu自然就会了解和系统内核交互的常用命令。</p></blockquote>

<hr />

<blockquote><p>顺利通过了一面，二面人就很少了，因此没怎么等，就进去会议室面试了。二面这位面试官我很喜欢，他应该运维组老大，温文儒雅，身上的气质让我想起了小学教钢琴的音乐老师。最开始也是自我介绍，然后他问我为什么选择UC，选择移动互联网，我照实说家里其实是希望我考公务员或者进国企的，但是我觉得年轻人应该做些有挑战的事，而且本人鄙视党员鄙视国企，没想到面试官赞同了我，接下来我就一发不可收拾批判一些社会现状，然后他微笑地对我说“有意思，你有点棱角”，然后我回了句“我是有点小愤青”(这绝逼不是技术面，是性格面），接下来我感到很轻松，能遇到和你价值观社会观相同的人，是幸运和幸福的。最后他让我提一个问题，我准备了一个自认为比较好的问题：UC浏览器敢于自己研发一个内核，一定接触到操作底层了，有没有想过做一个UC ROM，让整个系统都为UC浏览器优化，浏览器做为应用的平台，也许可以在论坛上开放给发烧友试玩，你看小米这样的新公司都敢做MIUI ROM(我不是米黑，MIUI第一版的确只是改改android皮肤）。面试官的想法是，公司只能集中人力做好一件事&#8211;本职浏览器，再去做一个ROM，对公司战略太分散了。</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MySQL note 1]]></title>
    <link href="http://orange8637.github.com/blog/2012/09/06/mysqlxue-xi-bi-ji-1/"/>
    <updated>2012-09-06T20:23:00+08:00</updated>
    <id>http://orange8637.github.com/blog/2012/09/06/mysqlxue-xi-bi-ji-1</id>
    <content type="html"><![CDATA[<blockquote><p>第一个学习的数据库，以MySQL开刀。</p>

<p>Server version:mysql 5.5.24-0ubuntu0.12.04.1 (Ubuntu)</p>

<p>1.字符集修改</p>

<p>mysql5.5版本以后不支持修改default-character-set方法，改为<code>vim sudo:/etc/mysql/my.cnf</code> ,在<code>[mysqld]</code>后添加</p></blockquote>

<pre><code>character-set-server=utf8
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[随时随地配置octopress本地环境]]></title>
    <link href="http://orange8637.github.com/blog/2012/09/03/sui-shi-sui-di-pei-zhi-octopressben-di-huan-jing/"/>
    <updated>2012-09-03T20:01:00+08:00</updated>
    <id>http://orange8637.github.com/blog/2012/09/03/sui-shi-sui-di-pei-zhi-octopressben-di-huan-jing</id>
    <content type="html"><![CDATA[<blockquote><p>最近帮南都报社的一小子买了台10.6寸上网本，为了自己也尝尝新电脑玩，将我自己那台14寸笔记本格了，把两台电脑都装了ubuntu12.04 &amp; win7双系统。自然是以前的octopress配置都没了，所以我要在两台电脑都配置好octopress本地环境，创造一个写博客的好环境。</p></blockquote>

<hr />

<blockquote><h3>一.安装ruby,git等软件依赖</h3></blockquote>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>kiwi@kiwi:~$ sudo apt-get install git
</span><span class='line'>kiwi@kiwi:~$ sudo apt-get install ruby1.9.3
</span><span class='line'>kiwi@kiwi:~$ sudo gem install bundler --pre</span></code></pre></td></tr></table></div></figure>


<hr />

<blockquote><h3>二.从github上获取你的博客</h3></blockquote>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>kiwi@kiwi:~$ git clone -b source git@github.com:orange8637/orange8637.github.com octopress
</span><span class='line'>kiwi@kiwi:~$ cd octopress/
</span><span class='line'>kiwi@kiwi:~$ git clone git@github.com:orange8637/orange8637.github.com _deploy 
</span><span class='line'>kiwi@kiwi:~$ bundle install
</span></code></pre></td></tr></table></div></figure>


<blockquote><p>由于octopress这个项目和我们其他的github项目不同，它可不是只有一个master分支的，所以我们要理清一个关系:文件目录octopress对应远程和本地的source分支，_deploy目录对应远程和本地的master分支。</p></blockquote>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>kiwi@kiwi:~/octopress$ git branch
</span><span class='line'>* source
</span><span class='line'>kiwi@kiwi:~/octopress$ cd _deploy/
</span><span class='line'>kiwi@kiwi:~/octopress/_deploy$ git branch
</span><span class='line'>* master</span></code></pre></td></tr></table></div></figure>


<hr />

<blockquote><p>好了。不到10条指令，源速度够快的话，10分钟我们就配好了octopress环境，就是这么简单，没有数据库史上最快的可以版本控制的博客环境就可以工作了。多<code>rake new_post</code>吧。</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[python之socket初探]]></title>
    <link href="http://orange8637.github.com/blog/2012/08/13/pythonzhi-socketchu-tan/"/>
    <updated>2012-08-13T23:59:00+08:00</updated>
    <id>http://orange8637.github.com/blog/2012/08/13/pythonzhi-socketchu-tan</id>
    <content type="html"><![CDATA[<blockquote><p>第一天，睡觉刷微薄。</p>

<p>第二天，刷微薄睡觉。</p>

<p>第三天，&#8230;&#8230;    。</p></blockquote>

<hr />

<blockquote><p>和胡适先生打牌打牌一样，我一到暑假就彻底慵懒，从小学到大学，暑假从来没有好好利用。开始是有规划的，但是一计划就是一整个暑假，也就是睡睡睡。</p>

<p>吐嘈完自身后，还是总结一下这几天在看奥运刷微薄间隙看的一点python入门书经验吧。</p>

<p>相信很多人都听过这个笑话：一哥们去谷歌面试，简历只有一句话：I wrote python，结果面试到第10轮谷歌才知道这句话的意思。这哥们就是大名鼎鼎的Guido。我当时听到这个笑话，有点纳闷，怎么以python为噱头，而不以cpp,java这些更有名的语言抖包袱呢。现在想来真是惭愧，大二了才知道python。</p>

<p>程序员每隔一段时间就会讨论各种语言的优劣，就像月经一样，即使像Linus这样的高手也不能避免。我个菜鸟就不浪费时间参与python和java,cpp的对比了，直接show the code, 展示一下python的美丽。</p></blockquote>

<figure class='code'><figcaption><span>tcpS.py</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c">#! /usr/bin/env python</span>
</span><span class='line'><span class="c"># encoding:utf-8</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">socket</span> <span class="kn">import</span> <span class="o">*</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">time</span> <span class="kn">import</span> <span class="n">ctime</span>
</span><span class='line'>
</span><span class='line'><span class="n">HOST</span> <span class="o">=</span> <span class="s">&#39;&#39;</span>
</span><span class='line'><span class="n">PORT</span> <span class="o">=</span> <span class="mi">21567</span>
</span><span class='line'><span class="n">BUFSIZE</span> <span class="o">=</span> <span class="mi">1024</span>
</span><span class='line'><span class="n">ADDR</span> <span class="o">=</span> <span class="p">(</span><span class="n">HOST</span><span class="p">,</span> <span class="n">PORT</span><span class="p">)</span>
</span><span class='line'><span class="n">tcpSerSock</span> <span class="o">=</span> <span class="n">socket</span><span class="p">(</span><span class="n">AF_INET</span><span class="p">,</span> <span class="n">SOCK_STREAM</span><span class="p">)</span>
</span><span class='line'><span class="n">tcpSerSock</span><span class="o">.</span><span class="n">bind</span><span class="p">(</span><span class="n">ADDR</span><span class="p">)</span>
</span><span class='line'><span class="n">tcpSerSock</span><span class="o">.</span><span class="n">listen</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>
</span><span class='line'><span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
</span><span class='line'>  <span class="k">print</span> <span class="s">&#39;waiting for connection...&#39;</span>
</span><span class='line'>  <span class="n">tcpCliSock</span><span class="p">,</span> <span class="n">addr</span> <span class="o">=</span> <span class="n">tcpSerSock</span><span class="o">.</span><span class="n">accept</span><span class="p">()</span>
</span><span class='line'>  <span class="k">print</span> <span class="s">&#39;...connected from:&#39;</span><span class="p">,</span><span class="n">addr</span>
</span><span class='line'>  <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
</span><span class='line'>      <span class="n">data</span> <span class="o">=</span> <span class="n">tcpCliSock</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="n">BUFSIZE</span><span class="p">)</span>
</span><span class='line'>      <span class="n">tcpCliSock</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s">&#39;the server replid at </span><span class="si">%s</span><span class="s"> </span><span class="si">%s</span><span class="s">&#39;</span> <span class="o">%</span><span class="p">(</span><span class="n">ctime</span><span class="p">(),</span> <span class="n">data</span><span class="p">))</span>
</span><span class='line'>  <span class="n">tcpCliSock</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span><span class='line'><span class="n">tcpSerSock</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p>抛开这段代码干什么，直接看外貌，想起一个同学曾经语重声长地对我说：python的代码很漂亮。用现在很火的中国好声音导师哈林老师的话讲就是：python代码辨识度很高。刚接触python一个星期，python用缩进的简洁取代其他语言的各种括号要漂亮多了。</p>

<p>言归真传，这个python例子是实现一个C/S架构的网络编程，重点是socket。我用的是TCP，先讲讲服务器的设计要点：创建服务器套接字->绑定地址到套接字->监听连接->服务器无限循环->接受客户端连接->通信循环->与客户端对话->关闭客户端套接字->关闭服务器套接字。</p>

<p>有了S版本，自然要有Client版本：</p></blockquote>

<figure class='code'><figcaption><span>tcpC.py</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c">#! /usr/bin/env python</span>
</span><span class='line'><span class="c"># encoding: utf-8</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">socket</span> <span class="kn">import</span> <span class="o">*</span>
</span><span class='line'>
</span><span class='line'><span class="n">HOST</span> <span class="o">=</span> <span class="s">&#39;192.168.1.103&#39;</span>
</span><span class='line'><span class="n">PORT</span> <span class="o">=</span> <span class="mi">21567</span>
</span><span class='line'><span class="n">BUFSIZE</span> <span class="o">=</span> <span class="mi">1024</span>
</span><span class='line'><span class="n">ADDR</span> <span class="o">=</span> <span class="p">(</span><span class="n">HOST</span><span class="p">,</span> <span class="n">PORT</span><span class="p">)</span>
</span><span class='line'><span class="n">tcpCliSock</span> <span class="o">=</span> <span class="n">socket</span><span class="p">(</span><span class="n">AF_INET</span><span class="p">,</span> <span class="n">SOCK_STREAM</span><span class="p">)</span>
</span><span class='line'><span class="n">tcpCliSock</span><span class="o">.</span><span class="n">connect</span><span class="p">(</span><span class="n">ADDR</span><span class="p">)</span>
</span><span class='line'><span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
</span><span class='line'>  <span class="n">data</span> <span class="o">=</span> <span class="nb">raw_input</span><span class="p">(</span><span class="s">&#39;&gt;&gt;&gt; &#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">tcpCliSock</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
</span><span class='line'>  <span class="n">data</span> <span class="o">=</span> <span class="n">tcpCliSock</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="n">BUFSIZE</span><span class="p">)</span>
</span><span class='line'>  <span class="k">print</span> <span class="n">data</span>
</span><span class='line'><span class="n">tcpCliSock</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p>客户端版本设计要点就简单多了：创建客户端套接字->连接服务器->通信循环->对话->关闭客户端套接字。</p>

<p>下面就要测试了。主机ubuntu12.04-desktop运行tcpS.py</p>

<p><img src="http://orange8637.github.com/images/tcpS.png" alt="" /></p>

<p>客户端虚拟机下的centos6.2-server运行tcpC.py</p>

<p><img src="http://orange8637.github.com/images/tcpC.png" alt="" /></p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[<<致命魔术>>，技术暑假]]></title>
    <link href="http://orange8637.github.com/blog/2012/07/27/%3C%3Czhi-ming-mo-zhu-%3E%3E%2Cji-zhu-shu-jia/"/>
    <updated>2012-07-27T19:14:00+08:00</updated>
    <id>http://orange8637.github.com/blog/2012/07/27/<<zhi-ming-mo-zhu->>,ji-zhu-shu-jia</id>
    <content type="html"><![CDATA[<blockquote><p> 大二的小学期终于结束了，标志着我的大学二分之一已经过了。</p></blockquote>

<hr />

<blockquote><p> 搞完了tinyos的实验报告，看了一部诺兰导演的电影《致命魔术》，演员都是我很喜欢的，有金刚狼，蝙蝠侠，还有我最喜欢的scarlett。电影似乎被定位为悬疑／惊悚片，但我看到更多的是两种对魔术境界追求的人。金刚狼为了追求表演结束时的掌声和观众惊讶的表情而表演魔术，蝙蝠侠为了将魔术钻研到最高境界而表演魔术。两位都是狂热追求魔术而几乎丧失人性的大师，导演也借此讽刺了爱迪生阴暗的一面。</p></blockquote>

<hr />

<blockquote><p> 这是大学最后一个暑假了，大一的暑假因为突如其来的疾病睡了一整年，所以大二下的暑假是真正意义上的第一个暑假。一入计算机之门深似海，这是一条技术的不归路。金刚狼和蝙蝠侠恰好就代表了对技术追求的两种人：是为了用技术实现工程，应用，创造改变人们生活的产品而学习技术，这是工程师的思想；还是为了学术的至高无上，理论的完备性，什么都要建立在数学的基础之上的科学研究，这是科学家的思想。当然这两者有一个共同点，都能改变世界，我不能否认谁不好。</p></blockquote>

<hr />

<blockquote><p> 金刚狼使用特斯拉的线圈机器把魔术做得复杂以至于找不到明显的缺陷，蝙蝠侠使用栾生兄弟把魔术做得简单以至于明显找不到缺陷。每次看到别人的博客写着若干年前，中学的他们随手拿起了一本《VB 》，然后啃出了一片IT的天地就默默敬佩。这个暑假，我也要过一个技术的暑假。Today，我不随手地拿起了一《python基础教程》，以Unix为中心学习python。</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[用生活的键敲打自己的命令行]]></title>
    <link href="http://orange8637.github.com/blog/2012/07/17/yong-sheng-huo-de-jian-qiao-da-zi-ji-de-ming-ling-xing/"/>
    <updated>2012-07-17T11:52:00+08:00</updated>
    <id>http://orange8637.github.com/blog/2012/07/17/yong-sheng-huo-de-jian-qiao-da-zi-ji-de-ming-ling-xing</id>
    <content type="html"><![CDATA[<blockquote><p> 一直以来，我最敬佩的不是那些技术看起来很牛很牛的人，而是那些文笔很好的创作设计者，不写博客的程序员不是好程序员，这是我的价值观。本来是不打算转载任何文章的，但是在豆瓣看到这个书评<a href="http://book.douban.com/review/5408425/">小魏爱生活</a>，太喜欢了。近期要常上豆瓣读书与CSDN。</p></blockquote>

<hr />

<blockquote><p> 世界是如此的熙熙攘攘</p>

<p> 让年轻的心找不到方向</p>

<p> 但这些人是不能小看的啊</p>

<p> 如果</p>

<p> 他们开始敲打自己的命令行</p></blockquote>

<p>　　</p>

<blockquote><p> “一群IT小小鸟，来自十几所院校，或科班，或非科班；或男生，或女生,在失望中追求希望，在迷茫中辨别方向……”那些故事太真实，让我觉得就像一个个学长学姐在我熟悉的教室里平静地给我讲他自己的故事一样，让我越读到后来，越怀着一种崇敬而羡慕的心情。</p></blockquote>

<p>　　</p>

<blockquote><p> 那些讲故事的人，是一开始就定好方向，然后一步一步走过去也好，还是在跌跌撞撞中摸索，最后找到自己的方向也好，都以认真的面孔，上进的姿态生活，然后在一点点进步，一点点思索中理所当然地走到那么一个平衡的状态——可以与生活握手言和，可以那么自然地审视自己的原来，然后平和而谦逊地告诉我们于自己经历中总结的道理。</p></blockquote>

<p>　　</p>

<blockquote><p> 在故事的字里行间，在每个不同的人不同的道路上的是相同品质，持久而坚定，专注而踏实。他们言传身受让我觉得，那由对自己对未来的不确定而引起的惶惶是一种多么无知的状态……收获那么少，只因为自己把那么多不曾用心打理的时间浪费在幼稚的好高骛远和无数的浅尝辄止上面。现在大二觉得时间那么那么少，才可惜大一的时间被自己那样低效率的牺牲。开始时那样充满期待的希望自己可以成为怎样怎样的牛人，然后在“谁谁很厉害”“谁谁做了个什么什么”的“听说”中，自己也知道了一些概念，然后匆匆的去学这个技术，去看那个书……书也真的是看了些，但翻透的少，囫囵的多……泛泛的涉猎中也有了一些自己的偏好，但真的不敢说什么是自己坚持下来了的，那么多时候只是让自己处于一个不停步的状态，以求不被落下的太远，不被鄙视的太多，却一直没有魄力停下来，认真的反思，认真的规划，认真的坚持……</p></blockquote>

<p>　　</p>

<blockquote><p> 优秀的人，优秀的故事，不是让我们在对比中无限的自卑，而是提醒我们去反省总结，去调整自己。我承认对比和反省中我对自己很有几分失望，但我依旧对未来抱以全部的希望。</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pair]]></title>
    <link href="http://orange8637.github.com/blog/2012/07/12/pair/"/>
    <updated>2012-07-12T19:25:00+08:00</updated>
    <id>http://orange8637.github.com/blog/2012/07/12/pair</id>
    <content type="html"><![CDATA[<blockquote><h3>Description                        Time Limit:1sec Memory Limit:256MB</h3>

<p>The N cities of Estiah are connected by N-1 roads. The roads are built in a way that it&#8217;s always possible to travel between any two cities.
Now the king of Estiah wants to pair adjacent cities into defending units. Two cities are adjacent if they are connected directly by a road. Each defending unit consists of exactly two cities, and each city can never be paired into two different defending units.
What the king wants to know is if it&#8217;s possible to have all the cities paired into defending units. Can you help him ?</p>

<h3>Input</h3>

<p>The input consists of several test cases.
The first line of the input is an positive integer indicating the number of test cases following.
Each test case starts with an positive integer N (1&lt;=N&lt;=10000) , which is the number of cities. Cities are numbered from 1 to N.
The next N-1 lines each contains two positive integer A and B, indicating that there is a road connecting city A and city B.</p>

<h3>Output</h3>

<p>For each test case, output a line containing &#8220;Yes&#8221; if there is a way to pair all the cities, or &#8220;No&#8221; otherwise.</p></blockquote>

<hr />

<blockquote><p>挺有意思的一道小题。定义：没有回路的连通图为树。对于图G=(V,E),V=N,|E|=N-1,显然这里的无向连通图即为树。要判断图是否能将连通的节点两两配对，看似无从下手，其实这里要用到贪心思想，首先找出一个配对原则：一棵树的叶子节点要配对，显然只有跟它的父节点配对。所以我们可以从叶子节点入手，把整个问题划分为所有叶子节点是否能完全配对，若所有叶子节点（度数为1的节点，删除一个节点后，相邻节点可能成为新叶子)都能配对，则Yes。因为题中N&lt;=10000,所以邻接矩阵会超时，这里用邻接表，vector,list,set都行，并用栈或队列存储叶子节点。</p>

<p>顺便吐嘈一下我们学院，除了做ACM题，其他都被弱化了，尤其是操作系统和计算机网络，教学和实践做的太不好了，一味的鼓励刷题，这不是真正的计算机专业，算法很重要，但是过度强调竞赛，就变成了另一个奥数，毁新手不倦。</p></blockquote>

<figure class='code'><figcaption><span>节点配对</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="cp">#include&lt;stdio.h&gt;</span>
</span><span class='line'><span class="cp">#include&lt;set&gt;</span>
</span><span class='line'><span class="cp">#include&lt;string.h&gt;</span>
</span><span class='line'><span class="cp">#include&lt;stack&gt;</span>
</span><span class='line'><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">set</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">adj</span><span class="p">[</span><span class="mi">10001</span><span class="p">];</span><span class="c1">//存储邻接表</span>
</span><span class='line'><span class="kt">int</span> <span class="n">deg</span><span class="p">[</span><span class="mi">10001</span><span class="p">];</span><span class="c1">//保存节点度数</span>
</span><span class='line'><span class="kt">int</span> <span class="n">del</span><span class="p">[</span><span class="mi">10001</span><span class="p">];</span><span class="c1">//判断节点是否配对，即是否被删除</span>
</span><span class='line'><span class="n">stack</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">leaf</span><span class="p">;</span><span class="c1">//保存叶子节点入栈</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">main</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">t</span><span class="p">;</span>
</span><span class='line'>  <span class="n">scanf</span><span class="p">(</span><span class="s">&quot;%d&quot;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">t</span><span class="p">);</span>
</span><span class='line'>    <span class="k">while</span><span class="p">(</span><span class="n">t</span><span class="o">--</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">n</span><span class="p">;</span>
</span><span class='line'>        <span class="n">scanf</span><span class="p">(</span><span class="s">&quot;%d&quot;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">n</span><span class="p">);</span>
</span><span class='line'>        <span class="n">memset</span><span class="p">(</span><span class="n">deg</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">deg</span><span class="p">));</span>
</span><span class='line'>        <span class="n">memset</span><span class="p">(</span><span class="n">del</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">del</span><span class="p">));</span>
</span><span class='line'>      <span class="k">while</span><span class="p">(</span><span class="o">!</span><span class="n">leaf</span><span class="p">.</span><span class="n">empty</span><span class="p">())</span>
</span><span class='line'>            <span class="n">leaf</span><span class="p">.</span><span class="n">pop</span><span class="p">();</span>
</span><span class='line'>        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="mi">10001</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>            <span class="n">adj</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">clear</span><span class="p">();</span>
</span><span class='line'>        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;=</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="kt">int</span> <span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">;</span>
</span><span class='line'>            <span class="n">scanf</span><span class="p">(</span><span class="s">&quot;%d%d&quot;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">a</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">b</span><span class="p">);</span>
</span><span class='line'>            <span class="n">adj</span><span class="p">[</span><span class="n">a</span><span class="p">].</span><span class="n">insert</span><span class="p">(</span><span class="n">b</span><span class="p">);</span><span class="c1">//无向图</span>
</span><span class='line'>            <span class="n">adj</span><span class="p">[</span><span class="n">b</span><span class="p">].</span><span class="n">insert</span><span class="p">(</span><span class="n">a</span><span class="p">);</span>
</span><span class='line'>            <span class="n">deg</span><span class="p">[</span><span class="n">a</span><span class="p">]</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>            <span class="n">deg</span><span class="p">[</span><span class="n">b</span><span class="p">]</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;=</span><span class="n">n</span> <span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>            <span class="k">if</span><span class="p">(</span><span class="n">deg</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">==</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>                <span class="n">leaf</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">i</span><span class="p">);</span>
</span><span class='line'>      <span class="k">while</span><span class="p">(</span><span class="o">!</span><span class="n">leaf</span><span class="p">.</span><span class="n">empty</span><span class="p">())</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="kt">int</span> <span class="n">v</span><span class="o">=</span><span class="n">leaf</span><span class="p">.</span><span class="n">top</span><span class="p">();</span>
</span><span class='line'>            <span class="n">leaf</span><span class="p">.</span><span class="n">pop</span><span class="p">();</span>
</span><span class='line'>            <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="n">adj</span><span class="p">[</span><span class="n">v</span><span class="p">].</span><span class="n">empty</span><span class="p">())</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>              <span class="kt">int</span> <span class="n">j</span><span class="o">=*</span><span class="p">(</span><span class="n">adj</span><span class="p">[</span><span class="n">v</span><span class="p">].</span><span class="n">begin</span><span class="p">());</span>
</span><span class='line'>              <span class="k">for</span><span class="p">(</span><span class="n">set</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;::</span><span class="n">iterator</span> <span class="n">it</span><span class="o">=</span><span class="n">adj</span><span class="p">[</span><span class="n">j</span><span class="p">].</span><span class="n">begin</span><span class="p">();</span> <span class="n">it</span><span class="o">!=</span><span class="n">adj</span><span class="p">[</span><span class="n">j</span><span class="p">].</span><span class="n">end</span><span class="p">();</span> <span class="n">it</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>              <span class="p">{</span>
</span><span class='line'>                  <span class="n">adj</span><span class="p">[</span><span class="o">*</span><span class="n">it</span><span class="p">].</span><span class="n">erase</span><span class="p">(</span><span class="n">j</span><span class="p">);</span><span class="c1">//与被删除节点相邻的边都删除</span>
</span><span class='line'>                  <span class="n">deg</span><span class="p">[</span><span class="o">*</span><span class="n">it</span><span class="p">]</span><span class="o">--</span><span class="p">;</span>
</span><span class='line'>                  <span class="k">if</span><span class="p">(</span><span class="n">deg</span><span class="p">[</span><span class="o">*</span><span class="n">it</span><span class="p">]</span><span class="o">==</span><span class="mi">1</span> <span class="o">&amp;&amp;</span> <span class="n">del</span><span class="p">[</span><span class="o">*</span><span class="n">it</span><span class="p">]</span><span class="o">==</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>                  <span class="p">{</span>
</span><span class='line'>                      <span class="n">leaf</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="o">*</span><span class="n">it</span><span class="p">);</span><span class="c1">//如果这个节点此时度数为1，入栈</span>
</span><span class='line'>                  <span class="p">}</span>
</span><span class='line'>              <span class="p">}</span>
</span><span class='line'>              <span class="n">del</span><span class="p">[</span><span class="n">v</span><span class="p">]</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="c1">//删除配对成功的两个节点</span>
</span><span class='line'>              <span class="n">del</span><span class="p">[</span><span class="n">j</span><span class="p">]</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">ok</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;=</span><span class="n">n</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>            <span class="k">if</span><span class="p">(</span><span class="n">del</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">==</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                <span class="n">ok</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
</span><span class='line'>                <span class="k">break</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="n">ok</span><span class="o">==</span><span class="mi">1</span> <span class="o">&amp;&amp;</span> <span class="n">n</span><span class="o">%</span><span class="mi">2</span><span class="o">==</span><span class="mi">0</span><span class="p">)</span><span class="c1">//只有偶数个节点才能配对</span>
</span><span class='line'>            <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Yes</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="k">else</span>
</span><span class='line'>            <span class="n">printf</span><span class="p">(</span><span class="s">&quot;No</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[C++缓冲区]]></title>
    <link href="http://orange8637.github.com/blog/2012/07/10/c-plus-plus-huan-chong-qu/"/>
    <updated>2012-07-10T11:30:00+08:00</updated>
    <id>http://orange8637.github.com/blog/2012/07/10/c-plus-plus-huan-chong-qu</id>
    <content type="html"><![CDATA[<blockquote><p>先提出问题，以后在解决。
案例1</p></blockquote>

<figure class='code'><figcaption><span>键盘输入流缓冲区</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="cp">#include &lt;iostream&gt;  </span>
</span><span class='line'><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span><span class='line'><span class="kt">int</span> <span class="n">main</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">char</span> <span class="n">name</span><span class="p">[</span><span class="mi">10</span><span class="p">];</span>
</span><span class='line'>  <span class="n">cin</span><span class="p">.</span><span class="n">getline</span><span class="p">(</span><span class="n">name</span><span class="p">,</span><span class="mi">5</span><span class="p">);</span>
</span><span class='line'>  <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="n">name</span><span class="p">;</span>
</span><span class='line'>  <span class="n">cin</span><span class="p">.</span><span class="n">getline</span><span class="p">(</span><span class="n">name</span><span class="p">,</span><span class="mi">5</span><span class="p">);</span>
</span><span class='line'>  <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="n">name</span><span class="p">;</span>
</span><span class='line'>  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<blockquote><p>案例2</p></blockquote>

<figure class='code'><figcaption><span>文件输入流缓冲区</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="cp">#include&lt;iostream&gt;</span>
</span><span class='line'><span class="cp">#include&lt;stdio.h&gt;</span>
</span><span class='line'><span class="cp">#include&lt;map&gt;</span>
</span><span class='line'><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span><span class='line'><span class="kt">int</span> <span class="n">main</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">freopen</span><span class="p">(</span><span class="s">&quot;data.in&quot;</span><span class="p">,</span> <span class="s">&quot;r&quot;</span><span class="p">,</span> <span class="n">stdin</span><span class="p">);</span>
</span><span class='line'>  <span class="n">map</span><span class="o">&lt;</span><span class="kt">char</span><span class="o">*</span><span class="p">,</span><span class="kt">double</span><span class="o">&gt;</span> <span class="n">m</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">char</span> <span class="n">name</span><span class="p">[</span><span class="mi">100</span><span class="p">];</span>
</span><span class='line'>  <span class="kt">double</span> <span class="n">score</span><span class="p">;</span>
</span><span class='line'>  <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="mi">2</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="c1">//scanf(&quot;%s %lf&quot;, name, &amp;score);</span>
</span><span class='line'>      <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">name</span><span class="o">&gt;&gt;</span><span class="n">score</span><span class="p">;</span>
</span><span class='line'>      <span class="n">m</span><span class="p">[</span><span class="n">name</span><span class="p">]</span> <span class="o">=</span> <span class="n">score</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">for</span><span class="p">(</span><span class="n">map</span><span class="o">&lt;</span><span class="kt">char</span><span class="o">*</span><span class="p">,</span><span class="kt">double</span><span class="o">&gt;::</span><span class="n">iterator</span> <span class="n">it</span><span class="o">=</span><span class="n">m</span><span class="p">.</span><span class="n">begin</span><span class="p">();</span> <span class="n">it</span><span class="o">!=</span><span class="n">m</span><span class="p">.</span><span class="n">end</span><span class="p">();</span> <span class="n">it</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%s %lf</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">it</span><span class="o">-&gt;</span><span class="n">first</span><span class="p">,</span> <span class="n">it</span><span class="o">-&gt;</span><span class="n">second</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p>附上原文本文件</p></blockquote>

<figure class='code'><figcaption><span>data.in</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>apple 92.3
</span><span class='line'>orange 94.5
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[我的vim配置]]></title>
    <link href="http://orange8637.github.com/blog/2012/06/24/wo-de-vim-peizhi/"/>
    <updated>2012-06-24T00:42:00+08:00</updated>
    <id>http://orange8637.github.com/blog/2012/06/24/wo-de-vim-peizhi</id>
    <content type="html"><![CDATA[<blockquote><p>首先贴个链接<a href="http://github.com/orange8637/myvim">我的vim配置</a>,没有github帐号也可以下载zip包安装。</p></blockquote>

<hr />

<blockquote><p>第一次接触到ubuntu的时候就听说了vim的大名，vim的前身是鼎鼎大名的Bill Joy叔叔在1976年写的vi,vi是集成到Unix-like系统中的。
开始被vim“神级编辑器”，“圣经编辑器”的称号吓尿了，对于一个连VS2010都用不太熟的人来说，我犹豫了很久是否有必要学习vim。但是，当我偶然在学校自习室见到某颖同学在他的10寸小上网本上完全抛离鼠标，如弹钢琴般在键盘上行云流水的使用vim以及vim插件vimperator，我震惊了。
vim的学习曲线的确很陡峭，但是一旦学会，威力巨大，工欲善其事，必先利其器,vim，你值得拥有。</p></blockquote>

<hr />

<blockquote><p>vim如果没有配置，还是不太好用的，下面先展示一下我的平常使用图
<img src="http://orange8637.github.com/images/vim.png" alt="vim" />
当然我更喜欢平常写点小东西的时候用vim配合terminator分屏，那码字简直是一个享受啊。
<img src="http://orange8637.github.com/images/vim2.png" alt="vim2" /></p></blockquote>

<hr />

<blockquote><p>vim是由c和vimscript语言构成的，所以vim的插件脚本也是很牛很牛的，少量插件让vim更好用。开始在网上找了几份vim配置，不是过于冗余复杂就是过分简单。所以决定自己根据需求配置一个属于自己的vim。</p></blockquote>

<hr />

<blockquote><p>首先,ctags需要手动安装，我将ctags压缩包放到了vim_plugin文件夹内，安装步骤经典的源代码安装方法</p></blockquote>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>pineapple@pineapple:~/.vim/vim_plugin$ tar -zxvf ctags-5.8.tar.gz 
</span><span class='line'>pineapple@pineapple:~/.vim/vim_plugin$ ./configure
</span><span class='line'>pineapple@pineapple:~/.vim/vim_plugin$ make
</span><span class='line'>pineapple@pineapple:~/.vim/vim_plugin$ sudo make install</span></code></pre></td></tr></table></div></figure>


<hr />

<blockquote><p>插件清单,我的最小完备集需求，实现任务管理器，TAB超级补全，头文件源文件一键切换，c/c++/java一键编译运行，过于智能的c.vim以及括号补全我不习惯，就没有设置了。</p></blockquote>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>pineapple@pineapple:~/.vim/plugin$ tree
</span><span class='line'>.
</span><span class='line'>├── a.vim
</span><span class='line'>├── neocomplcache.vim
</span><span class='line'>├── supertab.vim
</span><span class='line'>├── taglist.vim
</span><span class='line'>├── winfileexplorer.vim
</span><span class='line'>├── winmanager.vim
</span><span class='line'>└── wintagexplorer.vim</span></code></pre></td></tr></table></div></figure>


<hr />

<blockquote><p>当然还有最重要的.vimrc文件，这个可以根据需求灵活更改。详见<a href="https://github.com/orange8637/myvim/blob/master/vimrc">.vimrc</a>。配置好了vim,就可以做专心做你爱做的事，写笔记，写博客，写代码，写论文，当然还有两个很重要的浏览器插件，firefox的vimperator和chrome的vimium,都是利器，我每天都不能离开它们了，呵呵。</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[why blogging]]></title>
    <link href="http://orange8637.github.com/blog/2012/05/31/why-blogging/"/>
    <updated>2012-05-31T22:11:00+08:00</updated>
    <id>http://orange8637.github.com/blog/2012/05/31/why-blogging</id>
    <content type="html"><![CDATA[<blockquote><p>第一次听说blog是在2008年高二吧，那时有电脑课，电脑老师是个骄傲的抽大中华的老头，他说我会很多计算机专业词汇，比名牌大学出来的计算机专业学生还懂的多，然后他随便在黑板上写了个英文单词&#8221;blog&#8221;,问全班同学有没有人知道这个单词是什么意思，没想到真的是没有一个学生认识这个单词（不得不承认母校高中的计算机落后广州一百年了）。</p></blockquote>

<hr />

<blockquote><p>课后我就去了网吧，第一次知道了博客这个单词，而且也第一次听说了韩寒，徐静蕾，看着他们过千万的点击率，我心里萌生了个小小的梦想，将来我也要有一个属于自己的博客。大学进入计算机专业也算是阴差阳错，根本不知道编程语言为何物，只知道，我有自己的笔记本了，可以自由看博客了，于是学习从博客开始，到目前为止，我看过的博客比我看过的书要多多了。</p></blockquote>

<hr />

<blockquote><p>大二的时候无意中看到了<a href="http://weibo.com/parano?from=otherprofile&amp;wvr=3.6&amp;loc=infweihao">parano杨</a>的<a href="http://errno.me/">博客</a>，深深的被octopress的简洁吸引了，于是放弃了原来想用wordpress的想法(看了网上有人的一句&#8221;因为octopress而学ruby&#8221;深受鼓舞)，而且刚好正在学习Linux,于是就开始了octopress之旅。octopress能托管在github上，能像项目一样控制管理分支，这个设计真心棒！</p></blockquote>

<hr />

<blockquote><p>现在正式进入主题，我<strong>为什么要写博客呢？</strong></p>

<ol>
<li><p>现在不是已经是微薄时代，快餐文化时代了吗？</p></li>
<li><p>博客不是已经过时了吗？</p></li>
<li><p>个人资历过浅，自认为写博客不够水平</p></li>
</ol>


<p>我也爱玩微薄，但是我不认为微薄会取代博客，我认为两者会长期共存，就像讨论Windows该灭亡还是Linux会灭亡，这个对比的问题本身很无聊，世界是多元化的，存在即合理，博客还是有它独到的深入，这是微薄不能取代的。每个人建立博客之前都会问自己，为什么我要建立博客。我也这样问过自己，<a href="http://weibo.com/greatfun#1338479468184">FUCK同学</a>曾说，看了<a href="http://coolshell.cn">陈皓</a>的博客，自卑自己的能力不够写出好的博客。其实我想陈皓大牛也不是第一篇博客就写的那么好，如果自己的博客写的好，那写出来分享给大家，肯定有人能收益；如果自己的博客写的不好，回过头来看自己写的弱智东西，也会觉得很好笑,这样不是也让自己开心了一下嘛。所以<strong>用博客的形式来记录下你有价值的思考，会带来很多好处，却没有任何明显的坏处</strong>。<strong>书写是为了更好的思考</strong>,每次写博客，我都喜欢在夜深人静的时候，享受孤独的乐趣，毕竟互联网太浮躁了，充斥着各种诱惑亮点，而只有在写博客的时候，我才知道自己想的是什么，想要什么。<strong>用写博客来养成持之以恒做一件事情的习惯</strong>,我的大学到目前为止都是挺窝囊的,没有任何奖学金，没有参加竞赛，还挂过科，结果是很惨淡的，但是中间自由学习的过程我还是挺喜欢的，毕竟我现在每天都会看博客，而不是打游戏。</p></blockquote>

<hr />

<blockquote><p>最后，希望大家都开始写博客，然后爱上写博客。May the force be with you!</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[又折腾了一晚]]></title>
    <link href="http://orange8637.github.com/blog/2012/05/30/bu-zhe-teng/"/>
    <updated>2012-05-30T22:24:00+08:00</updated>
    <id>http://orange8637.github.com/blog/2012/05/30/bu-zhe-teng</id>
    <content type="html"><![CDATA[<blockquote><p>本来上次已经配置好的博客，但是由于细节的不完善，手贱贱地把本地和远程分支上的配置都删除了，无奈只得重新来一次github上的octopress博客搭建。</p>

<p>综合谷歌百度引擎，发现最好的教程仍然是<a href="http://octopress.org/">octopress官方博客</a>。不得不承认octopress写博客的方式很hacker,所有的步骤都能在shell和vim完成。有了2次搭建的经历，终于对octopree的文件管理方式有了一些理解:上传到github上的有两个分支，一个是master,一个是source,而source是我们最重要的源码,两个分支分别对应文件目录的deploy和，source文件夹(注释在下面的目录树了)，所以下次在其他电脑上书写博客，一定要注意clone下来的目录，要先<code>git checkout source</code>分支，然后<code>rake setup_github_pages</code>才能<code>rake new_post['blog']</code> <code>rake generate</code> <code>rake deploy</code>。</p>

<p>好了，终于可以随意自由markdown写博客了！:)</p></blockquote>

<figure class='code'><figcaption><span>octopress目录树</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>.
</span><span class='line'>├── _deploy *github上origin服务器上的master分支,既最终部署的页面
</span><span class='line'>│   ├── about
</span><span class='line'>│   ├── assets
</span><span class='line'>│   │   └── jwplayer
</span><span class='line'>│   │       └── glow
</span><span class='line'>│   │           ├── controlbar
</span><span class='line'>│   │           ├── display
</span><span class='line'>│   │           ├── dock
</span><span class='line'>│   │           ├── playlist
</span><span class='line'>│   │           └── sharing
</span><span class='line'>│   ├── blog
</span><span class='line'>│   │   ├── 2012
</span><span class='line'>│   │   │   └── 05
</span><span class='line'>│   │   │       ├── 14
</span><span class='line'>│   │   │       │   └── ubuntu-common-softwae
</span><span class='line'>│   │   │       ├── 15
</span><span class='line'>│   │   │       │   └── cao-zuo-xi-tong-zhong-de-linuxming-ling
</span><span class='line'>│   │   │       └── 30
</span><span class='line'>│   │   │           └── bu-zhe-teng
</span><span class='line'>│   │   ├── archives
</span><span class='line'>│   │   └── categories
</span><span class='line'>│   │       ├── linux
</span><span class='line'>│   │       └── thoughs
</span><span class='line'>│   ├── images
</span><span class='line'>│   ├── javascripts
</span><span class='line'>│   │   ├── asides
</span><span class='line'>│   │   └── libs
</span><span class='line'>│   └── stylesheets
</span><span class='line'>│       ├── bootstrap
</span><span class='line'>│       └── syntax
</span><span class='line'>├── plugins
</span><span class='line'>├── public *本地rake generate,rake preview生成的页面
</span><span class='line'>│   ├── about
</span><span class='line'>│   ├── assets
</span><span class='line'>│   │   └── jwplayer
</span><span class='line'>│   │       └── glow
</span><span class='line'>│   │           ├── controlbar
</span><span class='line'>│   │           ├── display
</span><span class='line'>│   │           ├── dock
</span><span class='line'>│   │           ├── playlist
</span><span class='line'>│   │           └── sharing
</span><span class='line'>│   ├── blog
</span><span class='line'>│   │   ├── 2012
</span><span class='line'>│   │   │   └── 05
</span><span class='line'>│   │   │       ├── 14
</span><span class='line'>│   │   │       │   └── ubuntu-common-softwae
</span><span class='line'>│   │   │       ├── 15
</span><span class='line'>│   │   │       │   └── cao-zuo-xi-tong-zhong-de-linuxming-ling
</span><span class='line'>│   │   │       └── 30
</span><span class='line'>│   │   │           └── bu-zhe-teng
</span><span class='line'>│   │   ├── archives
</span><span class='line'>│   │   └── categories
</span><span class='line'>│   │       ├── linux
</span><span class='line'>│   │       └── web
</span><span class='line'>│   ├── images
</span><span class='line'>│   ├── javascripts
</span><span class='line'>│   │   ├── asides
</span><span class='line'>│   │   └── libs
</span><span class='line'>│   └── stylesheets
</span><span class='line'>│       ├── bootstrap
</span><span class='line'>│       └── syntax
</span><span class='line'>├── sass
</span><span class='line'>│   ├── base
</span><span class='line'>│   ├── bootstrap
</span><span class='line'>│   ├── custom
</span><span class='line'>│   ├── partials
</span><span class='line'>│   │   └── sidebar
</span><span class='line'>│   └── syntax
</span><span class='line'>└── <span class="nb">source</span> *github上origin服务器上的source分支,源码存放地
</span><span class='line'>    ├── about *主页上about栏markdown文件
</span><span class='line'>    ├── assets
</span><span class='line'>    │   └── jwplayer
</span><span class='line'>    │       └── glow
</span><span class='line'>    │           ├── controlbar
</span><span class='line'>    │           ├── display
</span><span class='line'>    │           ├── dock
</span><span class='line'>    │           ├── playlist
</span><span class='line'>    │           └── sharing
</span><span class='line'>    ├── blog
</span><span class='line'>    │   └── archives
</span><span class='line'>    ├── images *博客本地配图存放地
</span><span class='line'>    ├── _includes
</span><span class='line'>    │   ├── asides
</span><span class='line'>    │   ├── custom
</span><span class='line'>    │   │   └── asides
</span><span class='line'>    │   └── post
</span><span class='line'>    ├── javascripts
</span><span class='line'>    │   ├── asides
</span><span class='line'>    │   └── libs
</span><span class='line'>    ├── _layouts
</span><span class='line'>    ├── _posts *博客所有markdown源文件
</span><span class='line'>    └── stylesheets
</span><span class='line'>        ├── bootstrap
</span><span class='line'>        └── syntax
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[操作系统实验中的linux命令]]></title>
    <link href="http://orange8637.github.com/blog/2012/05/15/cao-zuo-xi-tong-zhong-de-linuxming-ling/"/>
    <updated>2012-05-15T16:10:00+08:00</updated>
    <id>http://orange8637.github.com/blog/2012/05/15/cao-zuo-xi-tong-zhong-de-linuxming-ling</id>
    <content type="html"><![CDATA[<blockquote><p>首先不推荐中大信科院自己的操作系统实验课,跟着老师学完，你只是windows里点点鼠标更熟练了。强烈推荐这份<a href="http://cslab.nju.edu.cn/opsystem/#MainPage">南大操作系统实验</a>,我也正在看，欢迎交流<a href="https://twitter.com/#!/bigbiepineapple">@twitter</a>(求粉哟)
实验依赖(ubuntu 12.04下)</p>

<pre><code>sudo apt-get install nasm
sudo apt-get install vim
sudo apt-get instsall virtualbox
</code></pre>

<p>第一次用<a href="http://wowubuntu.com/markdown/">markdown</a>,好不熟悉,这是第二段?</p>

<p>因为怕考试时候忘了命令，所以将这些记下来。</p>

<p>创建一个新的软盘</p>

<pre><code>dd if=/dev/zero of=floppy.img bs=512 count=2880
</code></pre>

<p>512Bx2880是不是正好等于1.44MB,只要修改bs（block size),count参数，你可以创建任何格式大小的磁盘镜像文件。抛弃你的botchs创建空软盘的老土方法吧,linux提供你所需要的任何机制。</p>

<p>汇编编译及写引导扇区</p>

<pre><code>asm -&gt; bin
sudo nasm boot.asm -o boot.bin
bin -&gt; img
sudo dd if=boot.bin of=a.img bs=512 count=1 conv=notrunc
</code></pre>

<p>读出硬盘MBR</p>

<pre><code>sudo dd if=/dev/sda of=~/MYBoot.dat bs=512 count=1
</code></pre>

<p>用vim取代winHex编辑16进制功能</p>

<pre><code>vim -b floppy.img
:%!xxd
do some rewrite...
:%!xxd -r
:wq
</code></pre>

<p>往镜像文件添加文件</p>

<pre><code>sudo mkdir -p /mnt/floppy
sudo mount floppy.img /mnt/floppy
sudo cp *.com /mnt/floppy
sudo umount /mnt/floppy
</code></pre>

<p>反汇编</p>

<pre><code>ndisasm -o 0x7c00 boot.bin &gt;&gt; boot.asm
</code></pre></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ubuntu 12.04 源 && 常用软件]]></title>
    <link href="http://orange8637.github.com/blog/2012/05/14/ubuntu-common-softwae/"/>
    <updated>2012-05-14T13:47:00+08:00</updated>
    <id>http://orange8637.github.com/blog/2012/05/14/ubuntu-common-softwae</id>
    <content type="html"><![CDATA[<blockquote><p>不同版本，只需要将你执行<code>lsb_release -a</code>标准输出中codename替换下面的precise即可</p>

<pre><code>#教育网-中国科技大学 
deb http://debian.ustc.edu.cn/ubuntu/ precise main restricted universe multiverse
deb http://debian.ustc.edu.cn/ubuntu/ precise-backports restricted universe multiverse
deb http://debian.ustc.edu.cn/ubuntu/ precise-proposed main restricted universe multiverse
deb http://debian.ustc.edu.cn/ubuntu/ precise-security main restricted universe multiverse
deb http://debian.ustc.edu.cn/ubuntu/ precise-updates main restricted universe multiverse
deb-src http://debian.ustc.edu.cn/ubuntu/ precise main restricted universe multiverse
deb-src http://debian.ustc.edu.cn/ubuntu/ precise-backports main restricted universe multiverse
deb-src http://debian.ustc.edu.cn/ubuntu/ precise-proposed main restricted universe multiverse
deb-src http://debian.ustc.edu.cn/ubuntu/ precise-security main restricted universe multiverse
deb-src http://debian.ustc.edu.cn/ubuntu/ precise-updates main restricted universe multiverse
#公网-163,备胎，不在学校时取消下面注释同时注释上面
# deb http://mirrors.163.com/ubuntu/ precise main restricted universe multiverse
# deb http://mirrors.163.com/ubuntu/ precise-security main restricted universe multiverse
# deb http://mirrors.163.com/ubuntu/ precise-updates main restricted universe multiverse
# deb http://mirrors.163.com/ubuntu/ precise-proposed main restricted universe multiverse
# deb http://mirrors.163.com/ubuntu/ precise-backports main restricted universe multiverse
# deb-src http://mirrors.163.com/ubuntu/ precise main restricted universe multiverse
# deb-src http://mirrors.163.com/ubuntu/ precise-security main restricted universe multiverse
# deb-src http://mirrors.163.com/ubuntu/ precise-updates main restricted universe multiverse
# deb-src http://mirrors.163.com/ubuntu/ precise-proposed main restricted universe multiverse
# deb-src http://mirrors.163.com/ubuntu/ precise-backports main restricted universe multiverse
</code></pre>

<hr />

<p>我的常用软件</p>

<pre><code>sudo apt-get install ubuntu-restricted-extras
sudo apt-get install vlc
sudo apt-get install chromium-browser
sudo apt-get install vim-gtk
sudo apt-get install ssh
sudo apt-get install gnome-shell
sudo apt-get install wireshark
sudo apt-get install putty
sudo apt-get install filezilla
sudo apt-get install virtualbox
sudo apt-get install g++
sudo apt-get install gnome-tweak-tool
sudo apt-get install nasm
sudo apt-get install eclipse
sudo apt-get install ibus-googlepinyin
sudo apt-get install codeblocks
sudo apt-get install chmsee 
</code></pre></blockquote>
]]></content>
  </entry>
  
</feed>
